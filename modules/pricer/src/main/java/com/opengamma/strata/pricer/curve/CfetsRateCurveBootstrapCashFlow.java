package com.opengamma.strata.pricer.curve;

import com.opengamma.strata.product.TradeInfo;
import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public final class CfetsRateCurveBootstrapCashFlow
    implements ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final double paymentAmount;

  @PropertyDefinition(validate = "notNull")
  private final LocalDate paymentDate;

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code CfetsRateCurveBootstrapCashFlow}.
   * @return the meta-bean, not null
   */
  public static CfetsRateCurveBootstrapCashFlow.Meta meta() {
    return CfetsRateCurveBootstrapCashFlow.Meta.INSTANCE;
  }

  static {
    MetaBean.register(CfetsRateCurveBootstrapCashFlow.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CfetsRateCurveBootstrapCashFlow.Builder builder() {
    return new CfetsRateCurveBootstrapCashFlow.Builder();
  }

  private CfetsRateCurveBootstrapCashFlow(
      double paymentAmount,
      LocalDate paymentDate) {
    JodaBeanUtils.notNull(paymentAmount, "paymentAmount");
    JodaBeanUtils.notNull(paymentDate, "paymentDate");
    this.paymentAmount = paymentAmount;
    this.paymentDate = paymentDate;
  }

  @Override
  public CfetsRateCurveBootstrapCashFlow.Meta metaBean() {
    return CfetsRateCurveBootstrapCashFlow.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the paymentAmount.
   * @return the value of the property, not null
   */
  public double getPaymentAmount() {
    return paymentAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the paymentDate.
   * @return the value of the property, not null
   */
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CfetsRateCurveBootstrapCashFlow other = (CfetsRateCurveBootstrapCashFlow) obj;
      return JodaBeanUtils.equal(paymentAmount, other.paymentAmount) &&
          JodaBeanUtils.equal(paymentDate, other.paymentDate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentAmount);
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentDate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("CfetsRateCurveBootstrapCashFlow{");
    buf.append("paymentAmount").append('=').append(JodaBeanUtils.toString(paymentAmount)).append(',').append(' ');
    buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CfetsRateCurveBootstrapCashFlow}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code paymentAmount} property.
     */
    private final MetaProperty<Double> paymentAmount = DirectMetaProperty.ofImmutable(
        this, "paymentAmount", CfetsRateCurveBootstrapCashFlow.class, Double.TYPE);
    /**
     * The meta-property for the {@code paymentDate} property.
     */
    private final MetaProperty<LocalDate> paymentDate = DirectMetaProperty.ofImmutable(
        this, "paymentDate", CfetsRateCurveBootstrapCashFlow.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "paymentAmount",
        "paymentDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 909332990:  // paymentAmount
          return paymentAmount;
        case -1540873516:  // paymentDate
          return paymentDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CfetsRateCurveBootstrapCashFlow.Builder builder() {
      return new CfetsRateCurveBootstrapCashFlow.Builder();
    }

    @Override
    public Class<? extends CfetsRateCurveBootstrapCashFlow> beanType() {
      return CfetsRateCurveBootstrapCashFlow.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code paymentAmount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> paymentAmount() {
      return paymentAmount;
    }

    /**
     * The meta-property for the {@code paymentDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> paymentDate() {
      return paymentDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 909332990:  // paymentAmount
          return ((CfetsRateCurveBootstrapCashFlow) bean).getPaymentAmount();
        case -1540873516:  // paymentDate
          return ((CfetsRateCurveBootstrapCashFlow) bean).getPaymentDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CfetsRateCurveBootstrapCashFlow}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CfetsRateCurveBootstrapCashFlow> {

    private double paymentAmount;
    private LocalDate paymentDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CfetsRateCurveBootstrapCashFlow beanToCopy) {
      this.paymentAmount = beanToCopy.getPaymentAmount();
      this.paymentDate = beanToCopy.getPaymentDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 909332990:  // paymentAmount
          return paymentAmount;
        case -1540873516:  // paymentDate
          return paymentDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 909332990:  // paymentAmount
          this.paymentAmount = (Double) newValue;
          break;
        case -1540873516:  // paymentDate
          this.paymentDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public CfetsRateCurveBootstrapCashFlow build() {
      return new CfetsRateCurveBootstrapCashFlow(
          paymentAmount,
          paymentDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the paymentAmount.
     * @param paymentAmount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentAmount(double paymentAmount) {
      JodaBeanUtils.notNull(paymentAmount, "paymentAmount");
      this.paymentAmount = paymentAmount;
      return this;
    }

    /**
     * Sets the paymentDate.
     * @param paymentDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentDate(LocalDate paymentDate) {
      JodaBeanUtils.notNull(paymentDate, "paymentDate");
      this.paymentDate = paymentDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("CfetsRateCurveBootstrapCashFlow.Builder{");
      buf.append("paymentAmount").append('=').append(JodaBeanUtils.toString(paymentAmount)).append(',').append(' ');
      buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
