package com.opengamma.strata.pricer.curve;

import com.google.common.collect.Collections2;
import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.date.DayCount;
import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;

import java.io.Serializable;
import java.time.LocalDate;

import com.google.common.collect.ImmutableList;
import org.joda.beans.gen.PropertyDefinition;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class CfetsRateCurveBootstrapCashFlows
    implements ImmutableBean, Serializable, Comparable<CfetsRateCurveBootstrapCashFlows> {

  @PropertyDefinition(validate = "notNull")
  private final LocalDate spotDate;

  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<CfetsRateCurveBootstrapCashFlow> payments;

  @PropertyDefinition(validate = "notNull")
  private final double rate;

  public LocalDate getEndDate() {
    return payments.isEmpty() ? spotDate : payments.get(payments.size() - 1).getPaymentDate();
  }

  @Override
  public int compareTo(CfetsRateCurveBootstrapCashFlows o) {
    return getEndDate().compareTo(o.getEndDate());
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code CfetsRateCurveBootstrapCashFlows}.
   * @return the meta-bean, not null
   */
  public static CfetsRateCurveBootstrapCashFlows.Meta meta() {
    return CfetsRateCurveBootstrapCashFlows.Meta.INSTANCE;
  }

  static {
    MetaBean.register(CfetsRateCurveBootstrapCashFlows.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CfetsRateCurveBootstrapCashFlows.Builder builder() {
    return new CfetsRateCurveBootstrapCashFlows.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected CfetsRateCurveBootstrapCashFlows(CfetsRateCurveBootstrapCashFlows.Builder builder) {
    JodaBeanUtils.notNull(builder.spotDate, "spotDate");
    JodaBeanUtils.notNull(builder.payments, "payments");
    JodaBeanUtils.notNull(builder.rate, "rate");
    this.spotDate = builder.spotDate;
    this.payments = ImmutableList.copyOf(builder.payments);
    this.rate = builder.rate;
  }

  @Override
  public CfetsRateCurveBootstrapCashFlows.Meta metaBean() {
    return CfetsRateCurveBootstrapCashFlows.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the spotDate.
   * @return the value of the property, not null
   */
  public LocalDate getSpotDate() {
    return spotDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payments.
   * @return the value of the property, not null
   */
  public ImmutableList<CfetsRateCurveBootstrapCashFlow> getPayments() {
    return payments;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rate.
   * @return the value of the property, not null
   */
  public double getRate() {
    return rate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CfetsRateCurveBootstrapCashFlows other = (CfetsRateCurveBootstrapCashFlows) obj;
      return JodaBeanUtils.equal(spotDate, other.spotDate) &&
          JodaBeanUtils.equal(payments, other.payments) &&
          JodaBeanUtils.equal(rate, other.rate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(spotDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(payments);
    hash = hash * 31 + JodaBeanUtils.hashCode(rate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("CfetsRateCurveBootstrapCashFlows{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("spotDate").append('=').append(JodaBeanUtils.toString(spotDate)).append(',').append(' ');
    buf.append("payments").append('=').append(JodaBeanUtils.toString(payments)).append(',').append(' ');
    buf.append("rate").append('=').append(JodaBeanUtils.toString(rate)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CfetsRateCurveBootstrapCashFlows}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code spotDate} property.
     */
    private final MetaProperty<LocalDate> spotDate = DirectMetaProperty.ofImmutable(
        this, "spotDate", CfetsRateCurveBootstrapCashFlows.class, LocalDate.class);
    /**
     * The meta-property for the {@code payments} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<CfetsRateCurveBootstrapCashFlow>> payments = DirectMetaProperty.ofImmutable(
        this, "payments", CfetsRateCurveBootstrapCashFlows.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code rate} property.
     */
    private final MetaProperty<Double> rate = DirectMetaProperty.ofImmutable(
        this, "rate", CfetsRateCurveBootstrapCashFlows.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "spotDate",
        "payments",
        "rate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1831990320:  // spotDate
          return spotDate;
        case 1382682413:  // payments
          return payments;
        case 3493088:  // rate
          return rate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CfetsRateCurveBootstrapCashFlows.Builder builder() {
      return new CfetsRateCurveBootstrapCashFlows.Builder();
    }

    @Override
    public Class<? extends CfetsRateCurveBootstrapCashFlows> beanType() {
      return CfetsRateCurveBootstrapCashFlows.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code spotDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> spotDate() {
      return spotDate;
    }

    /**
     * The meta-property for the {@code payments} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableList<CfetsRateCurveBootstrapCashFlow>> payments() {
      return payments;
    }

    /**
     * The meta-property for the {@code rate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> rate() {
      return rate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1831990320:  // spotDate
          return ((CfetsRateCurveBootstrapCashFlows) bean).getSpotDate();
        case 1382682413:  // payments
          return ((CfetsRateCurveBootstrapCashFlows) bean).getPayments();
        case 3493088:  // rate
          return ((CfetsRateCurveBootstrapCashFlows) bean).getRate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CfetsRateCurveBootstrapCashFlows}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<CfetsRateCurveBootstrapCashFlows> {

    private LocalDate spotDate;
    private List<CfetsRateCurveBootstrapCashFlow> payments = ImmutableList.of();
    private double rate;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(CfetsRateCurveBootstrapCashFlows beanToCopy) {
      this.spotDate = beanToCopy.getSpotDate();
      this.payments = beanToCopy.getPayments();
      this.rate = beanToCopy.getRate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1831990320:  // spotDate
          return spotDate;
        case 1382682413:  // payments
          return payments;
        case 3493088:  // rate
          return rate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1831990320:  // spotDate
          this.spotDate = (LocalDate) newValue;
          break;
        case 1382682413:  // payments
          this.payments = (List<CfetsRateCurveBootstrapCashFlow>) newValue;
          break;
        case 3493088:  // rate
          this.rate = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public CfetsRateCurveBootstrapCashFlows build() {
      return new CfetsRateCurveBootstrapCashFlows(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the spotDate.
     * @param spotDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder spotDate(LocalDate spotDate) {
      JodaBeanUtils.notNull(spotDate, "spotDate");
      this.spotDate = spotDate;
      return this;
    }

    /**
     * Sets the payments.
     * @param payments  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder payments(List<CfetsRateCurveBootstrapCashFlow> payments) {
      JodaBeanUtils.notNull(payments, "payments");
      this.payments = payments;
      return this;
    }

    /**
     * Sets the {@code payments} property in the builder
     * from an array of objects.
     * @param payments  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder payments(CfetsRateCurveBootstrapCashFlow... payments) {
      return payments(ImmutableList.copyOf(payments));
    }

    /**
     * Sets the rate.
     * @param rate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rate(double rate) {
      JodaBeanUtils.notNull(rate, "rate");
      this.rate = rate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("CfetsRateCurveBootstrapCashFlows.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("spotDate").append('=').append(JodaBeanUtils.toString(spotDate)).append(',').append(' ');
      buf.append("payments").append('=').append(JodaBeanUtils.toString(payments)).append(',').append(' ');
      buf.append("rate").append('=').append(JodaBeanUtils.toString(rate)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
